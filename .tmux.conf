# 2.9の破壊的変更に伴い、一部の設定は自動で置換
# @see https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed
# @see https://gist.github.com/tbutts/6abf7fb5b948c066bf180922fb37adcf

# TMUX_VERSIONをセット
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

set-option -g history-limit 10000

# ウィンドウの色を設定する (v1.9未満かどうかで分岐)
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "setw -g window-bg default" \
    "setw -g window-style bg=default"
# ステータスラインの色を設定する (v1.9未満かどうかで分岐)
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "setw -g status-bg colour197" \
    "setw -g status-style bg=colour197"
# ウィンドウリストの色を設定する (v1.9未満かどうかで分岐)
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "setw -g window-status-fg cyan; \
     setw -g window-status-bg default; \
     setw -g window-status-attr dim" \
    "setw -g window-status-activity-style bg=default,dim"
# アクティブなウィンドウを目立たせる (v1.9未満かどうかで分岐)
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "setw -g window-status-current-fg white; \
     setw -g window-status-current-bg red; \
     setw -g window-status-current-attr bright" \
    "setw -g window-status-current-style fg=white,bg=red,bright"
# ペインボーダーの色を設定する
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "set -g pane-border-fg colour197" \
    "set -g pane-border-style fg=colour197"
# アクティブなペインを目立たせる
if-shell -b '[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1]' \
    "set -g pane-active-border-fg white" \
    "set -g pane-active-border-style fg=white"

# マウスをオンにする
set -g mouse on
set-option -g mouse on

# マウスでスクロールできるようにする
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# 256色端末を使う
set -g default-terminal "screen-256color"

# Esc入力時の待ち時間をキャンセル
set-option -s escape-time 0

# Mac環境でコピペできるようにする(2.6以降は不要)
if-shell '[ "$(echo "$TMUX_VERSION < 2.6" | bc)" = 1 ] && uname | grep -q Darwin' \
    'set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"'

# vim keybind
set-window-option -g mode-keys vi
setw -g mode-keys vi

# Vim Copy Bind

## if version < 2.4
#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
#    "bind-key    -t vi-copy v begin-selection"
## MacOS
#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ] && uname | grep -q Darwin' \
#    "bind-key    -t vi-copy y copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'; \
#     bind-key    -t vi-copy Enter copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy' "
## xsel
#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 -a `which xsel` ]' \
#    "bind-key -t vi-copy y     copy-pipe 'xsel -bi'; \
#     bind-key -t vi-copy Enter copy-pipe 'xsel -bi'"
## xclip
#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 -a `which xclip` ]' \
#    "bind-key -t vi-copy y     copy-pipe 'xclip -in -selection clipboard'; \
#     bind-key -t vi-copy Enter copy-pipe 'xclip -in -selection clipboard'"
#
## if version >= 2.4
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
#    "bind-key    -T copy-mode-vi v     send-keys -X begin-selection"
## MacOS
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ] && uname | grep -q Darwin' \
#    "bind-key    -T copy-mode-vi y     send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'; \
#     bind-key    -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy' "
## xsel
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1  -a `which xsel` ]' \
#    "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -bi'; \
#     bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xsel -bi'"
## xclip
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1  -a `which xclip` ]' \
#    "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -i -sel clip > /dev/null'; \
#     bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -i -sel clip > /dev/null\'"
## windows
#if-shell '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ] && uname -a | grep microsoft >/dev/null' \
#    "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'clip.exe'; \
#     bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'clip.exe'; \
#     bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'clip.exe'"
#
# paneの開始番号
set-option -g base-index 1
# ウィンドウのインデックスを1から始める
set -g base-index 1
## ステータスライン
set-option -g status-left-length 90
set-option -g status-right-length 90
# Contents left
set-option -g status-left 'tmux:[#P] #(~/bin/gcp-context 2>&1)'

# Reload statusbar
set-option -g status-interval 1

# Centerize
set-option -g status-justify centre

# Enable visual notification
set-window-option -g monitor-activity on

# Enable visual notification
set-option -g visual-activity on

# Enable statusbar top
set-option -g status-position top


# Length left
set-option -g status-left-length 90
set-option -g status-right-length 90

# Contents left
set-option -g status-left 'tmux: [#P]'

# Contents right
set-option -g status-right '#[fg=white]#(~/.tmux/bin/wifi)#[default] #(~/.tmux/bin/battery --tmux) [%Y-%m-%d(%a) %H:%M]#(echo " 🐾 ")'

# Reload statusbar
set-option -g status-interval 1

# Centerize
set-option -g status-justify centre

# Enable visual notification
set-window-option -g monitor-activity on

# Enable visual notification
set-option -g visual-activity on

# Enable statusbar top
set-option -g status-position top

# Set default shell
set-option -g default-shell /bin/zsh

set-option -g focus-events on
set-option -sa terminal-features ',xterm-256color:RGB'

# Set default directory to open new window
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

